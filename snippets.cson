# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.c':

	'void':
		'prefix': 'void'
		'body': 'void\t'

	'int':
		'prefix': 'int'
		'body': 'int\t\t'

	'char':
		'prefix': 'char'
		'body': 'char\t\t'

	'main':
		'prefix': 'main_void'
		'body': 'int\t\tmain(void)\n{\n\t$1\n\treturn (0);\n}'

	'main2':
		'prefix': 'main_ARG'
		'body': 'int\t\tmain(int ac, char **av)\n{\n\t$1\n\treturn (0);\n}'

	'if':
		'prefix': 'if'
		'body': 'if (${1:})\n{\n\t${2:}\n}'

	'while':
		'prefix': 'while'
		'body': 'while (${1:})\n{\n\t${2:}\n}'

	'ft_strlen':
		'prefix': 'ft_strlen'
		'body': 'ft_strlen(${1:const char *s})'

	'ft_strdup':
		'prefix': 'ft_strdup'
		'body': 'ft_strdup(${1:const char *s})'

	'ft_strcpy':
		'prefix': 'ft_strcpy'
		'body': 'ft_strcpy(${1:char *dest}, ${2:const char *src});'

	'ft_strncpy':
		'prefix': 'ft_strncpy'
		'body': 'ft_strncpy(${1:char *dest}, ${2:const char *src}, ${3:size_t n});'

	'ft_strcat':
		'prefix': 'ft_strcat'
		'body': 'ft_strcat(${1:char *dest}, ${2:const char *src})'

	'ft_strncat':
		'prefix': 'ft_strncat'
		'body': 'ft_strncat(${1:char *dest}, ${2:const char *src}, ${3:size_t n)}'

	'ft_isalpha':
		'prefix': 'ft_isalpha'
		'body': 'ft_isalpha(${1:int c})'

	'ft_isdigit':
		'prefix': 'ft_isdigit'
		'body': 'ft_isdigit(${1:int c})'

	'ft_isalnum':
		'prefix': 'ft_isalnum'
		'body': 'ft_isalnum(${1:int c})'

	'ft_isascii':
		'prefix': 'ft_isascii'
		'body': 'ft_isascii(${1:int c)}'

	'ft_isprint':
		'prefix': 'ft_isprint'
		'body': 'ft_isprint(${1:int c})'

	'ft_toupper':
		'prefix': 'ft_toupper'
		'body': 'ft_toupper(${1:int c})'

	'ft_tolower':
		'prefix': 'ft_tolower'
		'body': 'ft_tolower(${1:int c})'

	'ft_atoi':
		'prefix': 'ft_atoi'
		'body': 'ft_atoi(${1:const char *nptr})'

	'ft_strrchr':
		'prefix': 'ft_strrchr'
		'body': 'ft_strrchr(${1:const char *s}, ${2:int c})'

	'ft_strchr':
		'prefix': 'ft_strchr'
		'body': 'ft_strchr(${1:const char *s}, ${2:int c})'

	'ft_strstr':
		'prefix': 'ft_strstr'
		'body': 'ft_strstr(${1:const char *haystack}, ${2:const char *needle})'

	'ft_strnstr':
		'prefix': 'ft_strnstr'
		'body': 'ft_strnstr(${1:const char *haystack}, ${2:const char *needle}, ${3:size_t len})'

	'ft_strcmp':
		'prefix': 'ft_strcmp'
		'body': 'ft_strcmp(${1:const char *s1}, ${2:const char *s2)}'

	'ft_strncmp':
		'prefix': 'ft_strncmp'
		'body': 'ft_strncmp(${1:const char *s1}, ${2:const char *s2}, ${3:size_t n})'

	'ft_memcmp':
		'prefix': 'ft_memcmp'
		'body': 'ft_memcmp(${1:const void *s1}, ${2:const void *s2}, ${3:size_t n)}'

	'ft_memset':
		'prefix': 'ft_memset'
		'body': 'ft_memset(${1:void *b}, ${2:int c}, ${3:size_t len})'

	'ft_bzero':
		'prefix': 'ft_bzero'
		'body': 'ft_bzero(${1:void *s}, ${2:size_t n)}'

	'ft_memcpy':
		'prefix': 'ft_memcpy'
		'body': 'ft_memcpy(${1:void *dest}, ${2:const void *src}, ${3:size_t n})'

	'ft_memmove':
		'prefix': 'ft_memmove'
		'body': 'ft_memmove(${1:void *dest}, ${2:const void *src}, ${3:size_t n})'

	'ft_memchr':
		'prefix': 'ft_memchr'
		'body': 'ft_memchr(${1:const void *s}, ${2:int c}, ${3:size_t n})'

	'ft_putchar':
		'prefix': 'ft_putchar'
		'body': 'ft_putchar(${1:char c})'

	'ft_putstr':
		'prefix': 'ft_putstr'
		'body': 'ft_putstr(${1:char const *str})'

	'ft_putendl':
		'prefix': 'ft_putendl'
		'body': 'ft_putendl(${1:char const *str})'

	'ft_putnbr':
		'prefix': 'ft_putnbr'
		'body': 'ft_putnbr(${1:int n})'

	'ft_putchar_fd':
		'prefix': 'ft_putchar_fd'
		'body': 'ft_putchar_fd(${1:char c}, ${2:int fd})'

	'ft_putstr_fd':
		'prefix': 'ft_putstr_fd'
		'body': 'ft_putstr_fd(${1:char const *s}, ${2:int fd})'

	'ft_putendl_fd':
		'prefix': 'ft_putendl_fd'
		'body': 'ft_putendl_fd(${1:char const *s}, ${2:int fd})'

	'ft_putnbr_fd':
		'prefix': 'ft_putnbr_fd'
		'body': 'ft_putnbr_fd(${1:int n}, ${2:int fd})'

	'ft_strnew':
		'prefix': 'ft_strnew'
		'body': 'ft_strnew(${1:size_t size})'

	'ft_strjoin':
		'prefix': 'ft_strnew'
		'body': 'ft_strjoin(${1:char const *s1}, ${2:char const *s2})'

	'ft_strtrim':
		'prefix': 'ft_strtrim'
		'body': 'ft_strtrim(${1:char const *s})'

	'ft_strsub':
		'prefix': 'ft_strsub'
		'body': 'ft_strsub(${1:char const *s}, ${2:unsigned int start}, ${3:size_t len})'

	'ft_strsplit':
		'prefix': 'ft_strsplit'
		'body': 'ft_strsplit(${1:char const *s}, ${2:char c})'

	'ft_strclr':
		'prefix': 'ft_strclr'
		'body': 'ft_strclr(${1:char *s})'

	'ft_itoa':
		'prefix': 'ft_itoa'
		'body': 'ft_itoa(${1:int n})'
